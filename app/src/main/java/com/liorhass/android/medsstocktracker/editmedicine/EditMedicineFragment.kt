package com.liorhass.android.medsstocktracker.editmedicine

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.liorhass.android.medsstocktracker.R
import com.liorhass.android.medsstocktracker.util.OneTimeEvent
import com.liorhass.android.medsstocktracker.util.NavigationDestinations
import com.liorhass.android.medsstocktracker.util.NavigationEventWithNoArguments

import com.liorhass.android.medsstocktracker.database.AppDatabase
import com.liorhass.android.medsstocktracker.databinding.FragmentEditMedicineBinding
import timber.log.Timber

class EditMedicineFragment : Fragment() {

    private val args: EditMedicineFragmentArgs by navArgs() // Automatically generated by the safeArgs plugin

    private lateinit var binding: FragmentEditMedicineBinding
    private lateinit var viewModel: EditMedicineViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentEditMedicineBinding.inflate(inflater, container, false)
        binding.lifecycleOwner = viewLifecycleOwner

        val application = requireNotNull(this.activity).application
        val medicineDao = AppDatabase.getInstance(application).medicineDao
        val loggedEventsDao = AppDatabase.getInstance(application).loggedEventDao
        val medicineId = args.medicineId
        val vewModelFactory = EditMedicineViewModelFactory(medicineId, medicineDao, loggedEventsDao, application)
        viewModel = ViewModelProvider(this, vewModelFactory).get(EditMedicineViewModel::class.java)
        viewModel.navigationTrigger.observe(viewLifecycleOwner, Observer {
            navigateToDestination(it)
        })
        viewModel.medicineNameInputError.observe(viewLifecycleOwner, Observer {
            medicineNameInputError(it)
        })
        viewModel.dailyDoseInputError.observe(viewLifecycleOwner, Observer {
            dailyDoseInputError(it)
        })
        viewModel.currentStockInputError.observe(viewLifecycleOwner, Observer {
            currentStockInputError(it)
        })
        viewModel.resetInputErrors.observe(viewLifecycleOwner, Observer {
            resetErrorMarkings(it)
        })
        viewModel.showDialog.observe(viewLifecycleOwner, Observer {
            showHelpDialog(it)
        })

        binding.viewModel = viewModel

        return binding.root
    }

    // Some input error in the medicine name field (probably was left empty). We should display an
    // error message.
    private fun medicineNameInputError(oneTimeEvent: OneTimeEvent<Boolean>) {
        if (oneTimeEvent.getContentIfNotHandled() != null) {
            Timber.d("medicineNameInputError() setting error field")
            binding.medicineNameLayout.error = getString(R.string.err_msg_medicine_name)
        }
    }
    // Some input error in the daily dose field (probably was left empty). We should display an
    // error message.
    private fun dailyDoseInputError(oneTimeEvent: OneTimeEvent<Boolean>) {
        if (oneTimeEvent.getContentIfNotHandled() != null) {
            Timber.d("dailyDoseInputError() setting error field")
            binding.dailyDoseLayout.error = getString(R.string.err_msg_daily_dose)
        }
    }
    // Some input error in the current stock field (probably was left empty). We should display an
    // error message.
    private fun currentStockInputError(oneTimeEvent: OneTimeEvent<Boolean>) {
        if (oneTimeEvent.getContentIfNotHandled() != null) {
            Timber.d("currentStockInputError() setting error field")
            binding.currentStockLayout.error = getString(R.string.err_msg_current_stock)
        }
    }

    // This is needed because if the user had errors, and re-submits the form, we need to clear
    // the error markings before we re-evaluate the form. Otherwise the old error markings remain
    // on the screen.
    private fun resetErrorMarkings(oneTimeEvent: OneTimeEvent<Boolean>) {
        if (oneTimeEvent.getContentIfNotHandled() != null) {
            Timber.d("resetErrorMarkings() clearing error field")
            binding.medicineNameLayout.error = null
            binding.dailyDoseLayout.error = null
            binding.currentStockLayout.error = null
        }
    }

    private fun navigateToDestination(navigationEvent: OneTimeEvent<NavigationEventWithNoArguments>) {
        navigationEvent.getContentIfNotHandled()?.let { event -> // Only proceed if the event has never been handled
            when(event.destination) {
                NavigationDestinations.NAVIGATION_DESTINATION_MEDICINE_LIST_FRAGMENT ->
                    findNavController().navigate(EditMedicineFragmentDirections.actionEditMedicineFragmentToMedicineListFragment())
                else -> Timber.wtf("navigateToDestination(): Unknown destination: ${event.destination}")
            }
        }
    }

    private fun showHelpDialog(dialogInfoEvent: OneTimeEvent<EditMedicineViewModel.DialogInfo>) {
        dialogInfoEvent.getContentIfNotHandled()?.let {
            Timber.v("showHelpDialog()")
            MaterialAlertDialogBuilder(context)
                .setTitle(it.title)
                .setMessage(it.message)
                .setNegativeButton(it.dismissButtonText) { _, _ -> }
                .show()
        }
    }
}
